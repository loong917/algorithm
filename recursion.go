package algorithm

// 问题?
// 假如这里有 n 个台阶，每次你可以跨 1 个台阶或者 2 个台阶，请问走这 n 个台阶有多少种走法？
// 解释!
// 到达 n 个台阶只有 2 类走法，即从 n-1 个台阶上，再走 1 个台阶到达；或者从 n-2 个台阶上，再走 2 个台阶到达。
// 最后一步走 1 个台阶，即走 n-1 个台阶有 f(n-1) 种走法；最后一步走 2 个台阶，即走 n-2 个台阶有 f(n-2) 种走法。
// 走 n-1 个台阶的 f(n-1) 种走法， 都能到达 n 个台阶；走 n-2 个台阶的 f(n-2) 种走法也能达到 n 个台阶，
// 所以在 n 个台阶的走法为 f(n) = f(n-1) + f(n-2)。
// n-1 个台阶的 f(n-1) 种走法与 n-2 个台阶的 f(n-2) 种走法有重叠，但是最终走上 n 个台阶方法没有重复。
// f(n-1) 种走法，加上最后 1 个台阶到达 n 个台阶； f(n-2) 种走法， 加上最后 2 个台阶到达 n 个台阶，因此完整路径没有重复。

func FootStep(n int) int {
	if n == 1 {
		return 1
	}
	if n == 2 {
		return 2
	}
	return FootStep(n-1) + FootStep(n-2)
}
